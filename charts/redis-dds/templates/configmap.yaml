apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis-dds.fullname" . }}-redis-config
  labels:
    redis-version: "{{ .Release.version }}"
data:
  redis.conf: |- 
    {{- with .Values.redis.config }}
    port {{ .port }}
    slave-announce-ip MY_IP
    slave-announce-port {{ .port }}
    maxmemory {{ .maxmemory }}
    maxmemory-policy {{ .maxmemoryPolicy }}
    dir {{ .dir }}
    repl-diskless-sync {{ .replDisklessSync }}
    repl-timeout {{ .replTimeout }}
    repl-backlog-size {{ .replBacklogSize }}
    repl-ping-replica-period 3
    repl-diskless-sync {{ .replDisklessSync }}
    hz {{ .hz }}
    {{- if $.Values.redis.stateful.enabled }}
    appendonly {{ .appendonly }}
    appendfsync {{ .appendfsync }}
    no-appendfsync-on-rewrite {{ .noAppendfsyncOnRewrite }}
    auto-aof-rewrite-min-size {{ .autoAofRewriteMinSize }}
    auto-aof-rewrite-percentage {{ .autoAofRewritePercentage }}
    {{- end }}
    {{- end }}
    {{- if .Values.enableAuthentication -}}
    requirepass ADMINPASS
    masterauth ADMINPASS
    {{ end }}

  sentinel.conf: |-
    bind 0.0.0.0
    sentinel announce-ip MY_IP
    sentinel announce-port {{ .Values.sentinel.config.port }}
    {{- with .Values.sentinel.config }}
    port {{ .port | quote }}
    dir {{ .dir | quote }}
    sentinel down-after-milliseconds {{ $.Release.Name }} {{ .downAfterMilliseconds }}
    sentinel parallel-syncs {{ $.Release.Name }} {{ .parallelSyncs }}
    sentinel failover-timeout {{ $.Release.Name }} {{ .failoverTimeout }}
    {{ end }}

  parse_sentinels.awk: |-
    /ip/ {FOUND_IP=1}
    /port/ {FOUND_PORT=1}
    /runid/ {FOUND_RUNID=1}
    !/ip|port|runid/ {
      if (FOUND_IP==1) {
        IP=$1; FOUND_IP=0;
      }
      else if (FOUND_PORT==1) {
        PORT=$1;
        FOUND_PORT=0;
      } else if (FOUND_RUNID==1) {
        printf "\nsentinel known-sentinel {{ .Release.Name }} %s %s %s", IP, PORT, $0; FOUND_RUNID=0;
      }
    }
    
  start-redis.sh: |

    HEADLESS_SERVICE="{{ .Release.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    REDIS_SERVICE="{{ .Release.Name }}-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"

    echo "INFO - HEADLESS_SERVICE: $HEADLESS_SERVICE"
    echo "INFO - REDIS_SERVICE: $REDIS_SERVICE"

    continue=true
    while [ $continue == true ]
    do
        myip=$(hostname -i)
        if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep "^${myip}" )" ]]; then
            echo "INFO - waiting until headless service contains my IP (${myip})..."
            sleep 5
        else
            echo "INFO - headless service contains my pod's IP (${myip}), continuing"
            continue=false
        fi
    done

    # If we are the only host listed in the headless service, assume we are the only container up and running
    if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep -v "^$(hostname -i)")" ]]; then
        echo "INFO - headless service is empty except for my pod's IP, assuming I am a master pod"
        export REDIS_REPLICATION_MODE="master"
    else
        echo "INFO - headless service contains my IP, and others, assuming I am a slave pod"
        export REDIS_REPLICATION_MODE="slave"
    fi

    # Copy over redis.conf
    cp -f /redis-configs/redis.conf /data/redis.conf

    if [[ "$REDIS_REPLICATION_MODE" = "master" ]]; then
        echo "INFO - Starting as master node"
        ARGS=""
    else
        echo "INFO - Starting as a slave node"

        # Get current master
        sentinel_info_command="redis-cli -h $REDIS_SERVICE -p {{ .Values.sentinel.service.port }} sentinel get-master-addr-by-name {{ .Release.Name }}"

        export REDIS_SENTINEL_INFO=($($sentinel_info_command))
        export REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        export REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ ! ($($sentinel_info_command)) ]]; then
            # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
            # and are reporting the old one still. Once this happens the container will get stuck and never see the new
            # master. We stop here to allow the container to not pass the liveness check and be restarted.
            echo "Could not find the master from the existing sentinels, exiting"
            exit 1
        fi

        echo "INFO - Discovered master: $REDIS_MASTER_HOST:$REDIS_MASTER_PORT_NUMBER"
        ARGS="--slaveof $REDIS_MASTER_HOST $REDIS_MASTER_PORT_NUMBER"
    fi

    # Update redis.conf with current password
    sed -i "s/ADMINPASS/$ADMINPASS/g" /data/redis.conf
    sed -i "s/MY_IP/$MY_IP/g" /data/redis.conf

    # show redis.conf
    echo
    echo "INFO - /data/redis.conf:"
    cat /data/redis.conf

    # Start redis-server
    echo
    echo
    echo "INFO - Starting redis with: redis-server /data/redis.conf --slave-announce-ip $MY_IP $ARGS"
    echo
    redis-server /data/redis.conf --slave-announce-ip $MY_IP $ARGS

  start-sentinel.sh: |

    HEADLESS_SERVICE="{{ .Release.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    REDIS_SERVICE="{{ .Release.Name }}-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"

    echo "INFO - HEADLESS_SERVICE: $HEADLESS_SERVICE"
    echo "INFO - REDIS_SERVICE: $REDIS_SERVICE"

    continue=true
    while [ $continue == true ]
    do
        myip=$(hostname -i)
        if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep "^${myip}" )" ]]; then
            echo "INFO - headless service does not contain the IP of this pod: ${myip}"
            sleep 5
        else
            echo "INFO - headless service contains my IP, continuing: ${myip}"
            continue=false
        fi
    done

    # If we are the only host listed in the headless service, assume we are the only container up and running
    if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep -v "^$(hostname -i)")" ]]; then
        echo "INFO - headless service only contains my IP, assuming I am a master pod"
        export REDIS_REPLICATION_MODE="master"
    else
        echo "INFO - headless service contains my IP, and others, assuming I am a slave pod"
        export REDIS_REPLICATION_MODE="slave"
    fi

    if [[ "$REDIS_REPLICATION_MODE" = "master" ]]; then
        export REDIS_MASTER_HOST="$(hostname -i)"
        export REDIS_MASTER_PORT_NUMBER="{{ .Values.redis.service.port }}"
    
        echo "INFO - I am the master $REDIS_MASTER_HOST:$REDIS_MASTER_PORT_NUMBER"
    else

        # Get current master
        sentinel_info_command="redis-cli -h $REDIS_SERVICE -p {{ .Values.sentinel.service.port }} sentinel get-master-addr-by-name {{ .Release.Name }}"

        export REDIS_SENTINEL_INFO=($($sentinel_info_command))
        export REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        export REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ ! ($($sentinel_info_command)) ]]; then
            # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
            # and are reporting the old one still. Once this happens the container will get stuck and never see the new
            # master. We stop here to allow the container to not pass the liveness check and be restarted.
            echo "Could not find the master from the existing sentinels, exiting"
            exit 1
        fi

        echo "INFO - Discovered master $REDIS_MASTER_HOST:$REDIS_MASTER_PORT_NUMBER"

    fi

    # Clean sentinels from the current sentinel nodes
    for node in $( getent ahosts "$HEADLESS_SERVICE" | grep -v "^$(hostname -i)" | cut -f 1 -d ' ' | uniq )
    do
        output=$(redis-cli -h $node -p {{ .Values.sentinel.service.port }} sentinel reset "*")
        echo "INFO - Cleaned sentinel $node: $output"
        sleep 5
    done
    echo "INFO - Sentinels cleanup done"

    # Add current master to sentinel.conf
    # This needs to be the first line in the file
    echo "sentinel monitor {{ .Release.Name }} $REDIS_MASTER_HOST $REDIS_MASTER_PORT_NUMBER {{ add  (div .Values.redis.replicas 2) 1 }}" > /data/sentinel.conf
    
    if [[ "$REDIS_REPLICATION_MODE" = "slave" ]]; then
        # Get existing sentinels 
        existing_sentinels=$(timeout -s 3 10 redis-cli --raw -h $REDIS_SERVICE -p {{ .Values.sentinel.config.port }} SENTINEL sentinels {{ .Release.Name }})
        echo "$existing_sentinels" | awk -f /redis-configs/parse_sentinels.awk | tee -a  /data/sentinel.conf > /dev/null
        echo >> /data/sentinel.conf
    fi

    # Copy over rest of sentinel.conf
    cat /redis-configs/sentinel.conf >> /data/sentinel.conf

    # Set MY_IP in the sentinel.conf
    sed -i "s/MY_IP/$MY_IP/g" /data/sentinel.conf

    # Debug output
    echo
    echo "INFO - /data/sentinel.conf:"
    cat /data/sentinel.conf
    echo 
    echo

    # Start redis-server
    redis-server /data/sentinel.conf --sentinel

  start-proxy.sh: |
    count=0
    until [ "$count" = "{{ .Values.redis.startup.healthCheckCount }}" ]
    do
        # test ping response of sentinel
        sentinel_ping=$(timeout -s9 1 redis-cli -p {{ .Values.sentinel.service.port }} ping)
    
        # Check if getent output has NXDOMAIN, or if the output is empty
        if [ "$sentinel_ping" = "" ]
        then
            count=$(( count + 1 ))
            echo "Failed to get ping response from 127.0.0.1:{{ .Values.sentinel.service.port }}, sleeping 5"
            sleep {{ .Values.redis.startup.sleepTime }}
        else
            PING_RESPONSE="true"
            break
        fi
    done
    
    # Fail if sentinel never responded
    if [ -z "$PING_RESPONSE" ]
    then
        echo "Failed to ping sentinel, exiting"
        exit 1
    else
        echo "Got PING from sentinel"
    fi

    # Start redis-rust-proxy
    /app/bin/redis-rust-proxy --master {{ .Release.Name }} --sentinel localhost:{{ .Values.sentinel.service.port }} --listen 0.0.0.0:{{ .Values.proxy.service.port }}

  readiness-script.sh: |
    #!/bin/bash
    response=$(timeout -s 3 10 redis-cli -h localhost -p $1 ping)
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi

  prestop-sentinel.sh: |-

    run_sentinel_command() {
        redis-cli -h "$REDIS_SERVICE" -p "{{ .Values.sentinel.service.port }}" sentinel "$@"
    }

    failover_finished() {
      REDIS_SENTINEL_INFO=($(run_sentinel_command get-master-addr-by-name "{{ .Release.Name }}"))
      REDIS_MASTER_HOST="${REDIS_SENTINEL_INFO[0]}"
      [[ "$REDIS_MASTER_HOST" != "$(hostname -i)" ]]
    }

    REDIS_SERVICE="{{ .Release.Name }}-service.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
   
    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    # [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    # [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    if ! failover_finished
    then
        echo "INFO - I am the master pod and you are stopping me. Starting sentinel failover"

        # if I am the master, issue a command to failover once and then wait for the failover to finish
        run_sentinel_command failover "{{ .Release.Name }}"

        echo "INFO - Waiting for failover to finish"
    
        count=0
        until [ "$count" = "10" ]
        do
            if failover_finished 
            then 
                echo "INFO - Master has been successfully failed over to a different pod."
                sleep 5
                exit 0
            else
                echo "INFO - Failover not yet complete, sleeping"
                count=$(( count + 1 ))
                sleep 5
            fi
        done
        echo "INFO - Master failover failed"
        sleep 5
        exit 1
    else
        echo "INFO - I am not the master, exiting cleanly"
    fi

  prestop-redis.sh: |

    run_redis_command() {
        redis-cli -h 127.0.0.1 -p {{ .Values.redis.service.port }} "$@"
    }
    failover_finished() {
        REDIS_ROLE=$(run_redis_command role | head -1)
        [[ "$REDIS_ROLE" != "master" ]]
    }
    
    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    # [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    # [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    echo "INFO - Starting failover checks"

    count=0
    until [ "$count" = "10" ]
    do
        if failover_finished 
        then 
            echo "INFO - Master has been successfully failed over to a different pod."
            sleep 5
            exit 0
        else
            echo "INFO - Failover not yet complete, sleeping"
            count=$(( count + 1 ))
            sleep 5
        fi
    done
    echo "INFO - Master failover failed"
    sleep 5
    exit 1
