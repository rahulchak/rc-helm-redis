apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis-dds.fullname" . }}-redis-config
  labels:
    redis-version: "{{ .Release.version }}"
data:
  redis.conf: |- 
    {{- with .Values.redis.config }}
    port 6378
    slave-announce-ip MY_IP
    slave-announce-port {{ .port | quote }}
    maxmemory {{ .maxmemory | quote }}
    maxmemory-policy {{ .maxmemoryPolicy | quote }}
    dir {{ .dir | quote }}
    repl-diskless-sync {{ .replDisklessSync | quote }}
    repl-timeout {{ .replTimeout | quote }}
    repl-backlog-size {{ .replBacklogSize | quote }}
    repl-ping-replica-period 3
    repl-diskless-sync {{ .replDisklessSync | quote }}
    hz {{ .hz | quote }}
    {{- if $.Values.redis.stateful.enabled }}
    appendonly {{ .appendonly | quote }}
    appendfsync {{ .appendfsync | quote }}
    no-appendfsync-on-rewrite {{ .noAppendfsyncOnRewrite | quote }}
    auto-aof-rewrite-min-size {{ .autoAofRewriteMinSize | quote }}
    auto-aof-rewrite-percentage {{ .autoAofRewritePercentage | quote }}
    {{- end }}
    {{- end }}
    {{- if .Values.enableAuthentication -}}
    requirepass ADMINPASS
    masterauth ADMINPASS
    {{ end }}

  sentinel.conf: |-
    bind 0.0.0.0
    sentinel announce-ip MY_IP
    sentinel announce-port {{ .Values.sentinel.config.port }}
    {{- with .Values.sentinel.config }}
    port {{ .port | quote }}
    dir {{ .dir | quote }}
    sentinel down-after-milliseconds {{ $.Release.Name }} {{ .downAfterMilliseconds }}
    sentinel parallel-syncs {{ $.Release.Name }} {{ .parallelSyncs }}
    sentinel failover-timeout {{ $.Release.Name }} {{ .failoverTimeout }}
    {{ end }}

  parse_sentinels.awk: |-
    /ip/ {FOUND_IP=1}
    /port/ {FOUND_PORT=1}
    /runid/ {FOUND_RUNID=1}
    !/ip|port|runid/ {
      if (FOUND_IP==1) {
        IP=$1; FOUND_IP=0;
      }
      else if (FOUND_PORT==1) {
        PORT=$1;
        FOUND_PORT=0;
      } else if (FOUND_RUNID==1) {
        printf "\nsentinel known-sentinel {{ .Release.Name }} %s %s %s", IP, PORT, $0; FOUND_RUNID=0;
      }
    }
    
  start-master.sh: |
    # Update redis.conf with current password
    cp -f /redis-configs/redis.conf /data/redis.conf
    sed -i "s/ADMINPASS/$ADMINPASS/g" /data/redis.conf
    sed -i "s/MY_IP/$MY_IP/g" /data/redis.conf

    # Ensure that the master cache has a higher replica priority than the rest of the caches
    echo >> /data/redis.conf
    echo "replica-priority 50" >> /data/redis.conf

    # Start redis-server
    redis-server /data/redis.conf --slave-announce-ip $MY_IP

  start-redis.sh: |

    HEADLESS_SERVICE="{{ .Release.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    REDIS_SERVICE="{{ .Release.Name }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"

    continue=true
    while [ $continue == true ]
    do
        myip=$(hostname -i)
        if [[ "$(getent ahosts "$HEADLESS_SERVICE"; echo $?)" == "1" ]]; then
            echo "$HEADLESS_SERVICE does not exist, assuming I am the first master"
            continue=false
        if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep "^${myip}" )" ]]; then
            echo "$HEADLESS_SERVICE does not contain the IP of this pod: ${myip}"
            sleep 5
        else
            echo "$HEADLESS_SERVICE has my IP, continuing: ${myip}"
            continue=false
        fi
    done

    # If we are the only host listed in the headless service, assume we are the only container up and running
    if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep -v "^$(hostname -i)")" ]]; then
        echo "$HEADLESS_SERVICE only contains my IP, assume I am a master pod"
        export REDIS_REPLICATION_MODE="master"
    else
        echo "$HEADLESS_SERVICE contains my IP, assuming I am a slave pod"
        export REDIS_REPLICATION_MODE="slave"
    fi

    # Copy over redis.conf
    cp -f /redis-configs/redis.conf /data/redis.conf

    if [[ "$REDIS_REPLICATION_MODE" = "master" ]]; then
        echo "Starting as master node"
        ARGS=""
    else
        echo "Starting as a slave node"

        # Get current master
        sentinel_info_command="redis-cli -h $REDIS_SERVICE -p {{ .Values.sentinel.service.port }} sentinel get-master-addr-by-name {{ .Release.Name }}"

        export REDIS_SENTINEL_INFO=($($sentinel_info_command))
        export REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        export REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ ! ($($sentinel_info_command)) ]]; then
            # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
            # and are reporting the old one still. Once this happens the container will get stuck and never see the new
            # master. We stop here to allow the container to not pass the liveness check and be restarted.
            echo "Could not find the master from the existing sentinels, exiting"
            exit 1
        fi

        echo "Discovered master: $REDIS_MASTER_HOST:$REDIS_MASTER_PORT_NUMBER"
        ARGS="--slaveof $REDIS_MASTER_HOST $REDIS_MASTER_PORT_NUMBER"
    fi

    # Update redis.conf with current password
    sed -i "s/ADMINPASS/$ADMINPASS/g" /data/redis.conf
    sed -i "s/MY_IP/$MY_IP/g" /data/redis.conf

    # Start redis-server
    redis-server /data/redis.conf --slave-announce-ip $MY_IP $ARGS

  start-sentinel.sh: |

    HEADLESS_SERVICE="{{ .Release.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
    REDIS_SERVICE="{{ .Release.Name }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"

    while false
    do
        myip=$(hostname -i)
        if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep "^${myip}" )" ]]; then
            echo "$HEADLESS_SERVICE does not contain the IP of this pod: ${myip}"
            sleep 5
            return 1
        else
            echo "$HEADLESS_SERVICE has my IP, continuing: ${myip}"
            return 0
        fi
    done

    # If we are the only host listed in the headless service, assume we are the only container up and running
    if [[ -z "$(getent ahosts "$HEADLESS_SERVICE" | grep -v "^$(hostname -i)")" ]]; then
        echo "$HEADLESS_SERVICE only contains my IP, assume I am a master pod"
        export REDIS_REPLICATION_MODE="master"
    else
        echo "$HEADLESS_SERVICE contains my IP, assuming I am a slave pod"
        export REDIS_REPLICATION_MODE="slave"
    fi

    if [[ "$REDIS_REPLICATION_MODE" = "master" ]]; then
        export REDIS_MASTER_HOST="$(hostname -i)"
        export REDIS_MASTER_PORT_NUMBER="{{ .Values.redis.service.port }}"
    else

        # Get current master
        sentinel_info_command="redis-cli -h $REDIS_SERVICE -p {{ .Values.sentinel.service.port }} sentinel get-master-addr-by-name {{ .Release.Name }}"

        export REDIS_SENTINEL_INFO=($($sentinel_info_command))
        export REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        export REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ ! ($($sentinel_info_command)) ]]; then
            # master doesn't actually exist, this probably means the remaining pods haven't elected a new one yet
            # and are reporting the old one still. Once this happens the container will get stuck and never see the new
            # master. We stop here to allow the container to not pass the liveness check and be restarted.
            echo "Could not find the master from the existing sentinels, exiting"
            exit 1
        fi

        echo "Discovered master: $REDIS_MASTER_HOST:$REDIS_MASTER_PORT_NUMBER"

        # Get existing sentinels 
        existing_sentinels=$(timeout -s 3 10 redis-cli --raw -h $REDIS_SERVICE -p {{ .Values.sentinel.config.port }} SENTINEL sentinels {{ .Release.Name }})
        echo "$existing_sentinels" | awk -f /redis-configs/parse_sentinels.awk | tee -a  /data/sentinel.conf
        echo
    fi

    echo  "sentinel monitor {{ .Release.Name }} $REDIS_MASTER_HOST $REDIS_MASTER_PORT_NUMBER 2" > /data/sentinel.conf
    
    # Copy over rest of sentinel.conf
    cat /redis-configs/sentinel.conf >> /data/sentinel.conf
    sed -i "s/MY_IP/$MY_IP/g" /data/sentinel.conf

    # Debug output
    echo
    echo "/data/sentinel.conf:"
    cat /data/sentinel.conf
    echo

    # Start redis-server
    redis-server /data/sentinel.conf --sentinel

  start-proxy.sh: |
    count=0
    until [ "$count" = "{{ .Values.redis.startup.healthCheckCount }}" ]
    do
        # test ping response of sentinel
        sentinel_ping=$(timeout -s9 1 redis-cli -p 26379 ping)
    
        # Check if getent output has NXDOMAIN, or if the output is empty
        if [ "$sentinel_ping" = "" ]
        then
            count=$(( count + 1 ))
            echo "Failed to get ping response from 127.0.0.1:26379, sleeping 5"
            sleep {{ .Values.redis.startup.sleepTime }}
        else
            PING_RESPONSE="true"
            break
        fi
    done
    
    # Fail if sentinel never responded
    if [ -z "$PING_RESPONSE" ]
    then
        echo "Failed to ping sentinel, exiting"
        exit 1
    else
        echo "Got PING from sentinel"
    fi

    # Start redis-rust-proxy
    /app/bin/redis-rust-proxy --master {{ .Release.Name }} --sentinel localhost:26379 --listen 0.0.0.0:6379
